*** C# Notes ***



C# vs. .NET:
------------
- C# is a programming language
- .NET is a framework for building applications on Windows. There are different types of languages that
	can target the .NET framework and build applications on this framework (other than C#) such as F# or VB.NET 
	
C# is a programming language, while .NET is a framework. It consists of a run-time environment (CLR) and a class 
library that we use for building applications.
	

What exactly is the .NET framework?
-----------------------------------
.NET framework consists of 2 components: 
	1) CLR (Common Language Runtime)
	1) Class Library - for building applications
	

What is CLR (Common Language Runtime)?
--------------------------------------	
When you compile C# source code, the result is IL Code (Intermediate Language Code). This is independent of the computer 
on which it is running. 

Now, you need something that will translate the IL Code into Native Code to the machine that is running the application. This 
is the job of CLR. CLR is essentially an application that is sitting in memory whose job it is to translate IL Code into Machine code. 
This process is called Just-in-time Compilation (JIT). 

As long as a machine has CLR, it can run your C# application. 


Architecture of .NET Applications
---------------------------------
At a very high level, when you build an application with C#, your application consists of building blocks called classes. These classes 
colabroate with each other at runtime and as a result, the application provides some functionality.  


What is a class?
----------------
A class is a container that has some data (also called attributes) and functions (which are also called methods). 


What is a Namespace?
--------------------
As the number of classes grows, we need a way to organize the classes. This is where we use Namespace. A Namespace is a container for 
related classes. For example, in the .NET framework there are namespaces for working with databases or graphics or security. 

If you want to use a class that is defined in a different namespace, we need to import it in our code file (this is why you use the 
using statement). 


What is an Assembly?
--------------------
In real world applications, as the namespaces grow, we need a different way of partitioning an application. This is where we use an assembly. 
An assembly is a container for related namespaces. Physically, it is a file on the disk - which can either be an execuitable or DLL (Dynamically 
linked library). So when you compile an application, the compiler builds one or more assemblys depending on how you partition your code. 


Declaring Vriables/Constants
----------------------------
Integer --> int number;  OR  int number = 1;
float --> float pi = 3.14f;
constant --> const float Pi = 3.14f;  // Note: you cannot define a constant without setting its value!


Naming Conventions
------------------
Camel Case: firstName    // use this for regular variables 
Pascal Case: FirstName   // use this for constants  
Hungarian Notation: strFirstName   // dont use this 


Primitive Data Types in C#
--------------------------
Integral Numbers	byte
					short
					int 
					long
Real Numbers		float
					double
					decimal
Character			char 
Boolean				bool


Note about real numbers data types
----------------------------------
double is the default data type use by C# compiler when using real numbers. 
If you want to use a float, you have to explicitly tell the comipler that the number you have is a float.
Ex: float number = 1.2f; 
Note: If you do not have the f after 1.2, the compiler will thing to treat this number as a double because double 
is the default data type for real numbers - and of course a double cannot fit into a float so the program would not compile. 

The same applys to decimal real number data types. If you want to use a decimal, you need to add m after the number.
Ex: decimal number = 1.2m; 


Non-Primitive Data Types
------------------------
String
Array
Enum
Class


Type Conversion
---------------
In C# there are a few different ways to do type conversion:

1) Implicit type conversion:
	byte b = 1;
	int i = b; // this works because a byte can fit into an int 
	
2) Explicit type conversion (type casting):
	int i = 1;
	byte b = (byte)i; // i is an int and too big for a byte so it needs to be casted to a byte with (byte) 
	
3) Conversion between non-compatible types (such as string to int):
	// use the convert class or parse method
	string s = "1";
	int i = Convert.ToInt32(s);  // Convert class - 1st way
	int j = int.Parse(s);  // Parse method - 2nd way - this way takes a string and converts to a primitive type 


C# Operators
------------
In C# there are 5 types of operators:
1) Arithmetic Operators ( + - * / % ++ -- )
2) Comparison Operators ( == != > >= < <= )  The result of a comparison expression is always either true or false 
3) Assignment Operators ( = += -= *= /= ) Ex. a += 3 --> same as --> a = a + 3 
4) Logical Operators ( && || ! ) 
5) Bitwise Operators ( & | ) 



Misc Notes
----------
In Visual Studio, a "console application" is an application that does not have a graphical user interface. 

C# is a case sensitive language. 

In Visual Studio, run code with CTRL+F5 
Complie code with CTRL+Shift+b 

